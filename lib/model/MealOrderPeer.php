<?php


/**
 * Skeleton subclass for performing query and update operations on the 'meal_order' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Sep  8 09:03:55 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class MealOrderPeer extends BaseMealOrderPeer
{
    
    public static function getOrder($meal_id, $user_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id, Criteria::EQUAL);
        $c->add(self::SF_GUARD_USER_ID, $user_id, Criteria::EQUAL);
        $order = self::doSelectOne($c);
        return $order;
    }
    
    public static function getOrders($meal_id, $user_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id, Criteria::EQUAL);
        $c->add(self::SF_GUARD_USER_ID, $user_id, Criteria::EQUAL);
        $order = self::doSelect($c);
        return $order;
    }
    
    public static function getOrderCount($meal_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id);
        $order_count = self::doCount($c);
        return $order_count;
    }
    
    public static function saveOrder($meal_id, $user_id, $items, $delete_old_order = false, $old_order = null) {
        $success = false;
        foreach($items as $item) {
            if(isset($item['item_id'])) {
                $order = new MealOrder();
                $order->setMealId($meal_id);
                $order->setItemId($item['item_id']);
                $order->setSfGuardUserId($user_id);
                $order->setQuantity($item['quantity']);
                $order->setComments($item['comments']);
                if($order->save()) {
                    $success = true;
                }
            }
        }
        if($success) {
            if($delete_old_order) {
                foreach($old_order as $id => $order) {
                    $meal_order = self::retrieveByPk($id);
                    $meal_order->delete();
                }
            }
            return true;
        }
        return false;
    }
    
    public static function getPreviousOrder($meal_id, $user_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id, Criteria::EQUAL);
        $c->addAnd(self::SF_GUARD_USER_ID, $user_id, Criteria::EQUAL);
        $order = self::doSelect($c);
        return $order;
    }
    
} // MealOrderPeer
