<?php


/**
 * Skeleton subclass for performing query and update operations on the 'vote' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Sep 11 05:14:18 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class VotePeer extends BaseVotePeer
{

    public static function getVote($meal_id, $user_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id, Criteria::EQUAL);
        $c->add(self::SF_GUARD_USER_ID, $user_id, Criteria::EQUAL);
        $vote = self::doSelectOne($c);
        return $vote;
    }
    
    public static function getVoteCount($meal_id) {
        $c = new Criteria();
        $c->add(self::MEAL_ID, $meal_id);
        $vote_count = self::doCount($c);
        return $vote_count;
    }
    
    public static function getMostVotedPlace($meal_id) {
        $connection = Propel::getConnection();
        $query = 'SELECT %s as place_id, COUNT(%s) AS votes FROM %s WHERE %s = %s GROUP BY %s';
        $query = sprintf($query,
            self::PLACE_ID, self::PLACE_ID, self::TABLE_NAME, self::MEAL_ID, $meal_id, self::PLACE_ID
        );
        $statement = $connection->prepare($query);
        $statement->execute();
        $results = array();
        while ($resultset = $statement->fetch(PDO::FETCH_OBJ)) {
            $results[] = array('place_id' => $resultset->place_id, 'votes' => $resultset->votes);
        }
        $most_voted_place = null;
        $votes = 0;
        foreach($results as $result) {
            if($result['votes'] > $votes) {
                $most_voted_place = $result['place_id'];
                $votes = $result['votes'];
            }
        }
        $place = PlacePeer::retrieveByPk($most_voted_place);
        return $place;
    }
    
} // VotePeer